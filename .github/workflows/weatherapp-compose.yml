name: CI - WeatherApp (Docker Compose)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  compose:
    runs-on:
      group: Wesley-group-runner

    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      REDIS_USER: ${{ secrets.REDIS_USER }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      WEATHER_APIKEY: ${{ secrets.WEATHER_APIKEY }}
      DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      ERIC: eric

    steps:
      # 2) Avoid workspace cleaning that fails on root-owned files
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 0

      - name: Show runner info
        run: |
          echo "Runner: ${{ runner.name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Job running inside organization runner group Wesley-group-runner"

      - name: Check Docker
        run: |
          docker version
          docker compose version || docker-compose --version || true

      # 1) Compose with NAMED VOLUMES (no ./db-data or ./redis-data in repo)
      - name: Generate docker-compose file (named volumes)
        run: |
          cat > docker-compose.ci.yml <<'YAML'
          version: '3.5'
          services:
            db:
              container_name: weatherapp-db
              image: bulawesley/db:v1
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
              volumes:
                - db-data:/var/lib/mysql
              networks: [ weatherapp ]
              restart: always

            redis:
              container_name: weatherapp-redis
              image: bulawesley/redis:v1
              environment:
                REDIS_USER: ${REDIS_USER:-redis}
                REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
              volumes:
                - redis-data:/data
              networks: [ weatherapp ]
              restart: always

            weather:
              container_name: weatherapp-weather
              image: bulawesley/weather:v1
              environment:
                APIKEY: ${WEATHER_APIKEY}
              expose: [ "5000" ]
              depends_on: [ db, redis ]
              networks: [ weatherapp ]
              restart: always

            auth:
              container_name: weatherapp-auth
              image: bulawesley/auth:v1
              environment:
                DB_HOST: db
                DB_PASSWORD: ${DB_PASSWORD}
              expose: [ "8080" ]
              depends_on: [ weather ]
              networks: [ weatherapp ]
              restart: always

            ui:
              container_name: weatherapp-ui
              image: bulawesley/ui:v1
              environment:
                eric: ${ERIC}
                AUTH_HOST: auth
                AUTH_PORT: "8080"
                WEATHER_HOST: weather
                WEATHER_PORT: "5000"
                REDIS_USER: ${REDIS_USER:-redis}
                REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
              expose: [ "3000" ]
              ports: [ "3000:3000" ]
              depends_on: [ auth ]
              networks: [ weatherapp ]
              restart: always

          networks:
            weatherapp: {}

          volumes:
            db-data: {}
            redis-data: {}
          YAML

      - name: Pre-cleanup (ignore errors)
        run: docker compose -f docker-compose.ci.yml down -v || true

      - name: Pull Docker images
        run: docker compose -f docker-compose.ci.yml pull

      - name: Start stack
        run: docker compose -f docker-compose.ci.yml up -d

      - name: Wait for containers to start
        run: |
          echo "⏳ Waiting for services to initialize..."
          sleep 15
          docker ps

      - name: Display external VM IP and common service ports
        run: |
          EXTERNAL_IP=$(curl -s ifconfig.me || curl -s https://api.ipify.org || echo "unknown")
          echo "========================================================"
          echo "🌐 External IP: $EXTERNAL_IP"
          echo "Open this in your browser (ensure GCP firewall allows tcp:3000):"
          echo "  http://$EXTERNAL_IP:3000"
          echo "========================================================"
          (ss -tuln || netstat -tuln) | grep -E '(:3000|:8080|:5000)' || true

      - name: Keep stack running for 3 minutes
        run: |
          echo "🕒 Application will remain up for 3 minutes before teardown..."
          sleep 180

      - name: Teardown stack
        if: always()
        run: |
          echo "🧹 Bringing down the stack..."
          docker compose -f docker-compose.ci.yml down -v || true

      # 3) Extra cleanup (only needed if you ever reintroduce bind mounts)
      - name: (Optional) Force-delete leftover data dirs if present
        if: always()
        run: |
          sudo rm -rf ./db-data ./redis-data || true
